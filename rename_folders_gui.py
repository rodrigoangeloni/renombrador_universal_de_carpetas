#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Renombrador Universal de Carpetas - Versi√≥n GUI
Normaliza nombres eliminando espacios, acentos y caracteres especiales
Versi√≥n GUI Moderna - Interfaz gr√°fica intuitiva
Autor: rodrigoangeloni
Fecha: 2025-06-01
"""

import os
import re
import sys
import unicodedata
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from pathlib import Path
import threading
from datetime import datetime

class RenombradorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Renombrador Universal de Carpetas v2.0 GUI")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # Variables de configuraci√≥n
        self.directory_var = tk.StringVar()
        self.lowercase_var = tk.BooleanVar(value=True)
        self.remove_accents_var = tk.BooleanVar(value=True)
        self.replace_spaces_var = tk.BooleanVar(value=True)
        self.remove_special_var = tk.BooleanVar(value=True)
        self.preserve_numbers_var = tk.BooleanVar(value=True)
        self.preserve_dots_var = tk.BooleanVar(value=False)
        
        # Lista para almacenar vista previa
        self.preview_data = []
        
        self.setup_ui()
        
        # Aplicar tema moderno
        self.apply_modern_theme()
        
    def setup_ui(self):
        """Configura la interfaz de usuario"""
        
        # Frame principal con padding
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        # T√≠tulo principal
        title_label = ttk.Label(main_frame, text="üéØ Renombrador Universal de Carpetas", 
                               font=("Segoe UI", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # Secci√≥n de selecci√≥n de directorio
        dir_frame = ttk.LabelFrame(main_frame, text="üìÇ Directorio de Trabajo", padding="10")
        dir_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        dir_frame.columnconfigure(1, weight=1)
        
        ttk.Label(dir_frame, text="Carpeta:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.dir_entry = ttk.Entry(dir_frame, textvariable=self.directory_var, width=60)
        self.dir_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        self.browse_btn = ttk.Button(dir_frame, text="Examinar...", command=self.browse_directory)
        self.browse_btn.grid(row=0, column=2, padx=(0, 10))
        
        self.current_dir_btn = ttk.Button(dir_frame, text="Usar Directorio Actual", 
                                        command=self.use_current_directory)
        self.current_dir_btn.grid(row=0, column=3)
        
        # Secci√≥n de opciones de configuraci√≥n
        options_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è Opciones de Normalizaci√≥n", padding="10")
        options_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        
        # Checkboxes de opciones en dos columnas
        left_options = ttk.Frame(options_frame)
        left_options.grid(row=0, column=0, sticky=(tk.W, tk.N), padx=(0, 20))
        
        right_options = ttk.Frame(options_frame)
        right_options.grid(row=0, column=1, sticky=(tk.W, tk.N))
        
        ttk.Checkbutton(left_options, text="Convertir a min√∫sculas", 
                       variable=self.lowercase_var, command=self.update_preview).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(left_options, text="Eliminar acentos (√±‚Üín, √°‚Üía)", 
                       variable=self.remove_accents_var, command=self.update_preview).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(left_options, text="Reemplazar espacios con _", 
                       variable=self.replace_spaces_var, command=self.update_preview).pack(anchor=tk.W, pady=2)
        
        ttk.Checkbutton(right_options, text="Eliminar caracteres especiales", 
                       variable=self.remove_special_var, command=self.update_preview).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(right_options, text="Preservar n√∫meros (0-9)", 
                       variable=self.preserve_numbers_var, command=self.update_preview).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(right_options, text="Preservar puntos (.)", 
                       variable=self.preserve_dots_var, command=self.update_preview).pack(anchor=tk.W, pady=2)
        
        # Botones de acci√≥n
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=3, pady=(0, 15))
        
        self.preview_btn = ttk.Button(buttons_frame, text="üëÅÔ∏è Vista Previa", 
                                    command=self.show_preview, style="Accent.TButton")
        self.preview_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.examples_btn = ttk.Button(buttons_frame, text="üìã Ver Ejemplos", 
                                     command=self.show_examples)
        self.examples_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.rename_btn = ttk.Button(buttons_frame, text="üîÑ Renombrar Carpetas", 
                                   command=self.start_rename_process, style="Accent.TButton")
        self.rename_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.help_btn = ttk.Button(buttons_frame, text="‚ùì Ayuda", command=self.show_help)
        self.help_btn.pack(side=tk.LEFT)
        
        # √Årea de resultados con pesta√±as
        notebook = ttk.Notebook(main_frame)
        notebook.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Pesta√±a de vista previa
        preview_frame = ttk.Frame(notebook)
        notebook.add(preview_frame, text="Vista Previa")
        
        self.preview_text = scrolledtext.ScrolledText(preview_frame, height=15, wrap=tk.WORD)
        self.preview_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Pesta√±a de log de resultados
        log_frame = ttk.Frame(notebook)
        notebook.add(log_frame, text="Log de Resultados")
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Barra de estado
        self.status_var = tk.StringVar(value="Listo - Selecciona un directorio para comenzar")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(5, 0))
        
        # Inicializar con directorio actual
        self.use_current_directory()
        
    def apply_modern_theme(self):
        """Aplica un tema moderno a la interfaz"""
        style = ttk.Style()
        
        # Configurar tema
        if "clam" in style.theme_names():
            style.theme_use("clam")
        
        # Personalizar colores
        style.configure("Accent.TButton", 
                       background="#0078d4", 
                       foreground="white",
                       font=("Segoe UI", 9, "bold"))
        
    def browse_directory(self):
        """Abre el di√°logo para seleccionar directorio"""
        directory = filedialog.askdirectory(title="Seleccionar directorio de trabajo")
        if directory:
            self.directory_var.set(directory)
            self.update_status(f"Directorio seleccionado: {directory}")
            self.update_preview()
            
    def use_current_directory(self):
        """Usa el directorio actual del ejecutable"""
        if getattr(sys, 'frozen', False):
            current_dir = os.path.dirname(sys.executable)
        else:
            current_dir = os.path.dirname(os.path.abspath(__file__))
        
        self.directory_var.set(current_dir)
        self.update_status(f"Usando directorio actual: {current_dir}")
        self.update_preview()
        
    def get_options(self):
        """Obtiene las opciones actuales de configuraci√≥n"""
        return {
            'lowercase': self.lowercase_var.get(),
            'remove_accents': self.remove_accents_var.get(),
            'replace_spaces': self.replace_spaces_var.get(),
            'remove_special': self.remove_special_var.get(),
            'preserve_numbers': self.preserve_numbers_var.get(),
            'preserve_dots': self.preserve_dots_var.get()
        }
        
    def normalize_folder_name(self, name, options=None):
        """Normaliza el nombre de la carpeta seg√∫n las opciones especificadas"""
        if not name or not isinstance(name, str):
            return 'unnamed_folder'
        
        if options is None:
            options = self.get_options()
        
        original_name = name
        
        # Convertir a min√∫sculas si est√° habilitado
        if options.get('lowercase', True):
            name = name.lower()
        
        # Eliminar acentos si est√° habilitado
        if options.get('remove_accents', True):
            try:
                name = unicodedata.normalize('NFD', name)
                name = ''.join(char for char in name if unicodedata.category(char) != 'Mn')
            except:
                pass
        
        # Construir patr√≥n de caracteres permitidos
        allowed_chars = r'a-zA-Z'
        
        if options.get('preserve_numbers', True):
            allowed_chars += r'0-9'
        
        if options.get('preserve_dots', False):
            allowed_chars += r'\.'
        
        # Reemplazar espacios
        if options.get('replace_spaces', True):
            name = re.sub(r'\s+', '_', name)
            allowed_chars += r'_'
        else:
            allowed_chars += r'\s'
        
        # Eliminar caracteres especiales si est√° habilitado
        if options.get('remove_special', True):
            pattern = f'[^{allowed_chars}]'
            name = re.sub(pattern, '_', name)
        
        # Limpiar m√∫ltiples guiones bajos consecutivos
        name = re.sub(r'_+', '_', name)
        
        # Eliminar guiones bajos al inicio y final
        name = name.strip('_')
        
        # Si el nombre queda vac√≠o, usar un nombre por defecto
        if not name:
            name = 'unnamed_folder'
        
        return name
        
    def update_preview(self):
        """Actualiza la vista previa autom√°ticamente"""
        if self.directory_var.get():
            self.show_preview()
            
    def show_preview(self):
        """Muestra una vista previa de los cambios que se realizar√°n"""
        directory = self.directory_var.get()
        if not directory:
            messagebox.showwarning("Advertencia", "Por favor selecciona un directorio primero.")
            return
            
        try:
            base_path = Path(directory).resolve()
            
            if not base_path.exists():
                self.update_status("ERROR: El directorio no existe")
                return
                
            if not base_path.is_dir():
                self.update_status("ERROR: La ruta no es un directorio")
                return
            
            folders = [item for item in base_path.iterdir() if item.is_dir()]
            
            if not folders:
                self.preview_text.delete(1.0, tk.END)
                self.preview_text.insert(tk.END, "‚ÑπÔ∏è No se encontraron carpetas en este directorio.")
                self.update_status("No hay carpetas para procesar")
                return
            
            options = self.get_options()
            self.preview_data = []
            
            # Generar vista previa
            preview_content = f"üìÇ VISTA PREVIA - {len(folders)} carpetas encontradas\n"
            preview_content += f"üìç Directorio: {base_path}\n"
            preview_content += "‚ïê" * 80 + "\n\n"
            
            changes_count = 0
            conflicts_count = 0
            
            for i, folder in enumerate(folders, 1):
                original_name = folder.name
                new_name = self.normalize_folder_name(original_name, options)
                
                status = ""
                if original_name == new_name:
                    status = "‚úÖ Sin cambios"
                else:
                    new_path = folder.parent / new_name
                    if new_path.exists():
                        status = "‚ö†Ô∏è CONFLICTO (ya existe)"
                        conflicts_count += 1
                    else:
                        status = "üîÑ Se renombrar√°"
                        changes_count += 1
                
                preview_line = f"[{i:2d}] {status}\n"
                preview_line += f"     '{original_name}'\n"
                if original_name != new_name:
                    preview_line += f"  ‚Üí '{new_name}'\n"
                preview_line += "\n"
                
                preview_content += preview_line
                
                self.preview_data.append({
                    'folder': folder,
                    'original_name': original_name,
                    'new_name': new_name,
                    'will_change': original_name != new_name,
                    'has_conflict': new_path.exists() if original_name != new_name else False
                })
            
            # Resumen
            summary = f"\n{'='*80}\n"
            summary += f"üìä RESUMEN:\n"
            summary += f"   ‚Ä¢ Total de carpetas: {len(folders)}\n"
            summary += f"   ‚Ä¢ Se renombrar√°n: {changes_count}\n"
            summary += f"   ‚Ä¢ Sin cambios: {len(folders) - changes_count - conflicts_count}\n"
            if conflicts_count > 0:
                summary += f"   ‚Ä¢ ‚ö†Ô∏è Conflictos: {conflicts_count}\n"
            
            preview_content += summary
            
            self.preview_text.delete(1.0, tk.END)
            self.preview_text.insert(tk.END, preview_content)
            
            self.update_status(f"Vista previa generada: {changes_count} cambios, {conflicts_count} conflictos")
            
        except Exception as e:
            self.update_status(f"Error al generar vista previa: {str(e)}")
            messagebox.showerror("Error", f"Error al generar vista previa:\n{str(e)}")
            
    def show_examples(self):
        """Muestra ejemplos de transformaci√≥n en una ventana nueva"""
        examples_window = tk.Toplevel(self.root)
        examples_window.title("Ejemplos de Transformaci√≥n")
        examples_window.geometry("600x500")
        examples_window.transient(self.root)
        examples_window.grab_set()
        
        frame = ttk.Frame(examples_window, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        title_label = ttk.Label(frame, text="üìã Ejemplos de Transformaci√≥n", 
                               font=("Segoe UI", 14, "bold"))
        title_label.pack(pady=(0, 20))
        
        examples_text = scrolledtext.ScrolledText(frame, height=20, wrap=tk.WORD)
        examples_text.pack(fill=tk.BOTH, expand=True)
        
        options = self.get_options()
        
        examples = [
            "Mi Carpeta Especial √±√°√©√≠√≥√∫",
            "Fotos Vacaciones (2024)",
            "M√∫sica - Rock & Roll",
            "DOCUMENTOS IMPORTANTES!!!",
            "Nueva Carpeta 1.5",
            "Proyecto Final - Versi√≥n 2.0",
            "Dise√±o Gr√°fico & Animaci√≥n",
            "Datos Cient√≠ficos [Backup]",
            "Pel√≠culas HD (1080p)",
            "C√≥digo Fuente - Python 3.9"
        ]
        
        content = "Con la configuraci√≥n actual:\n\n"
        
        for i, example in enumerate(examples, 1):
            transformed = self.normalize_folder_name(example, options)
            content += f"{i:2d}. '{example}'\n"
            content += f"    ‚Üí '{transformed}'\n\n"
        
        examples_text.insert(tk.END, content)
        examples_text.configure(state='disabled')
        
        close_btn = ttk.Button(frame, text="Cerrar", command=examples_window.destroy)
        close_btn.pack(pady=(10, 0))
        
    def start_rename_process(self):
        """Inicia el proceso de renombrado en un hilo separado"""
        if not self.preview_data:
            messagebox.showwarning("Advertencia", "Por favor genera una vista previa primero.")
            return
            
        # Verificar si hay cambios que hacer
        changes = [item for item in self.preview_data if item['will_change'] and not item['has_conflict']]
        conflicts = [item for item in self.preview_data if item['has_conflict']]
        
        if not changes:
            if conflicts:
                messagebox.showinfo("Sin cambios", 
                                  f"No hay cambios que realizar.\nSe detectaron {len(conflicts)} conflictos que deben resolverse manualmente.")
            else:
                messagebox.showinfo("Sin cambios", "No hay cambios que realizar. Todas las carpetas ya tienen nombres normalizados.")
            return
        
        # Confirmar la operaci√≥n
        message = f"¬øConfirmas que quieres renombrar {len(changes)} carpetas?"
        if conflicts:
            message += f"\n\nNOTA: {len(conflicts)} carpetas con conflictos ser√°n omitidas."
        
        if not messagebox.askyesno("Confirmar Renombrado", message):
            return
            
        # Deshabilitar botones durante el proceso
        self.rename_btn.configure(state='disabled')
        self.preview_btn.configure(state='disabled')
        
        # Ejecutar en hilo separado para no bloquear la interfaz
        threading.Thread(target=self.rename_folders_thread, daemon=True).start()
        
    def rename_folders_thread(self):
        """Ejecuta el renombrado en un hilo separado"""
        try:
            self.log_text.delete(1.0, tk.END)
            
            log_content = f"üîÑ INICIANDO PROCESO DE RENOMBRADO\n"
            log_content += f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            log_content += f"üìÇ Directorio: {self.directory_var.get()}\n"
            log_content += "‚ïê" * 80 + "\n\n"
            
            self.root.after(0, lambda: self.log_text.insert(tk.END, log_content))
            self.root.after(0, lambda: self.update_status("Renombrando carpetas..."))
            
            renamed_count = 0
            skipped_count = 0
            error_count = 0
            
            for i, item in enumerate(self.preview_data, 1):
                if not item['will_change']:
                    log_line = f"[{i:2d}] ‚úÖ Sin cambios: '{item['original_name']}'\n"
                    skipped_count += 1
                elif item['has_conflict']:
                    log_line = f"[{i:2d}] ‚ö†Ô∏è CONFLICTO: '{item['original_name']}' ‚Üí '{item['new_name']}' (ya existe)\n"
                    error_count += 1
                else:
                    try:
                        new_path = item['folder'].parent / item['new_name']
                        item['folder'].rename(new_path)
                        log_line = f"[{i:2d}] üîÑ RENOMBRADO: '{item['original_name']}' ‚Üí '{item['new_name']}'\n"
                        renamed_count += 1
                    except Exception as e:
                        log_line = f"[{i:2d}] ‚ùå ERROR: '{item['original_name']}' - {str(e)}\n"
                        error_count += 1
                
                self.root.after(0, lambda line=log_line: self.log_text.insert(tk.END, line))
                self.root.after(0, lambda: self.log_text.see(tk.END))
            
            # Resumen final
            summary = f"\n{'='*80}\n"
            summary += f"‚úÖ PROCESO COMPLETADO\n\n"
            summary += f"üìä ESTAD√çSTICAS FINALES:\n"
            summary += f"   ‚Ä¢ Carpetas renombradas: {renamed_count}\n"
            summary += f"   ‚Ä¢ Sin cambios: {skipped_count}\n"
            summary += f"   ‚Ä¢ Errores/Conflictos: {error_count}\n"
            summary += f"   ‚Ä¢ Total procesadas: {len(self.preview_data)}\n"
            
            self.root.after(0, lambda: self.log_text.insert(tk.END, summary))
            self.root.after(0, lambda: self.update_status(f"Completado: {renamed_count} renombradas, {error_count} errores"))
            
            # Mostrar mensaje de √©xito
            if renamed_count > 0:
                self.root.after(0, lambda: messagebox.showinfo("Proceso Completado", 
                    f"‚úÖ Proceso completado exitosamente!\n\n"
                    f"Carpetas renombradas: {renamed_count}\n"
                    f"Errores/Conflictos: {error_count}"))
            
            # Actualizar vista previa
            self.root.after(0, self.update_preview)
            
        except Exception as e:
            error_msg = f"‚ùå ERROR CR√çTICO: {str(e)}\n"
            self.root.after(0, lambda: self.log_text.insert(tk.END, error_msg))
            self.root.after(0, lambda: messagebox.showerror("Error Cr√≠tico", f"Error durante el renombrado:\n{str(e)}"))
            
        finally:
            # Rehabilitar botones
            self.root.after(0, lambda: self.rename_btn.configure(state='normal'))
            self.root.after(0, lambda: self.preview_btn.configure(state='normal'))
            
    def show_help(self):
        """Muestra la ventana de ayuda"""
        help_window = tk.Toplevel(self.root)
        help_window.title("Ayuda - Renombrador Universal")
        help_window.geometry("700x600")
        help_window.transient(self.root)
        help_window.grab_set()
        
        frame = ttk.Frame(help_window, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        title_label = ttk.Label(frame, text="‚ùì Ayuda y Gu√≠a de Uso", 
                               font=("Segoe UI", 14, "bold"))
        title_label.pack(pady=(0, 20))
        
        help_text = scrolledtext.ScrolledText(frame, height=25, wrap=tk.WORD)
        help_text.pack(fill=tk.BOTH, expand=True)
        
        help_content = """üéØ PROP√ìSITO:
Este programa normaliza nombres de carpetas para hacerlos m√°s compatibles con diferentes sistemas operativos, servidores web y aplicaciones.

üìã PASOS RECOMENDADOS:
1. Selecciona el directorio de trabajo usando "Examinar..." o "Usar Directorio Actual"
2. Configura las opciones seg√∫n tus necesidades
3. Usa "Vista Previa" para ver qu√© cambios se realizar√°n
4. Si est√°s satisfecho con los cambios, haz clic en "Renombrar Carpetas"

‚öôÔ∏è OPCIONES PRINCIPALES:

‚Ä¢ Convertir a min√∫sculas: Convierte TODAS las letras a min√∫sculas
  Ejemplo: "MI CARPETA" ‚Üí "mi carpeta"

‚Ä¢ Eliminar acentos: Remueve tildes y caracteres especiales del espa√±ol
  Ejemplo: "√±√°√©√≠√≥√∫" ‚Üí "naeio"

‚Ä¢ Reemplazar espacios: Convierte espacios en guiones bajos (_)
  Ejemplo: "mi carpeta" ‚Üí "mi_carpeta"

‚Ä¢ Eliminar caracteres especiales: Quita s√≠mbolos como @#$%&*()[]{}
  Ejemplo: "carpeta (2024)" ‚Üí "carpeta_2024"

‚Ä¢ Preservar n√∫meros: Mantiene los d√≠gitos del 0-9
  Ejemplo: "version 2.1" ‚Üí "version_2_1" (si preservar puntos est√° desactivado)

‚Ä¢ Preservar puntos: Mantiene los puntos en los nombres
  Ejemplo: "version 2.1" ‚Üí "version_2.1"

üõ°Ô∏è SEGURIDAD:
‚Ä¢ Solo renombra CARPETAS, NO toca archivos
‚Ä¢ No borra ni modifica el contenido de las carpetas
‚Ä¢ Detecta conflictos de nombres antes de hacer cambios
‚Ä¢ Muestra vista previa antes de hacer cualquier modificaci√≥n

üí° CONSEJOS:
‚Ä¢ Siempre haz una copia de seguridad antes de usar el programa
‚Ä¢ Usa la vista previa para verificar los cambios antes de aplicarlos
‚Ä¢ Resuelve manualmente los conflictos detectados antes de proceder
‚Ä¢ Las carpetas que ya tienen nombres normalizados no ser√°n modificadas

üö® CONFLICTOS:
Un conflicto ocurre cuando el nuevo nombre ya existe. Por ejemplo:
- Tienes "Mi Carpeta" y "mi_carpeta"
- Ambas se normalizar√≠an a "mi_carpeta"
- El programa detectar√° esto y no renombrar√° ninguna para evitar p√©rdida de datos

‚ùì ¬øNECESITAS M√ÅS AYUDA?
Este programa es ideal para:
‚Ä¢ Organizar archivos para servidores web
‚Ä¢ Preparar carpetas para sistemas Linux
‚Ä¢ Normalizar nombres para aplicaciones
‚Ä¢ Eliminar caracteres problem√°ticos en nombres de archivos"""

        help_text.insert(tk.END, help_content)
        help_text.configure(state='disabled')
        
        close_btn = ttk.Button(frame, text="Cerrar", command=help_window.destroy)
        close_btn.pack(pady=(10, 0))
        
    def update_status(self, message):
        """Actualiza el mensaje de estado"""
        self.status_var.set(message)
        self.root.update_idletasks()

def main():
    """Funci√≥n principal"""
    root = tk.Tk()
    
    # Configurar icono si existe
    try:
        # Si tenemos un icono, lo usamos
        pass
    except:
        pass
    
    app = RenombradorGUI(root)
    
    # Centrar ventana
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()
