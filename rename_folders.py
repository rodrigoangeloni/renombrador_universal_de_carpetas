#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Renombrador Universal de Carpetas
Normaliza nombres eliminando espacios, acentos y caracteres especiales
Versi√≥n Universal - Para cualquier tipo de carpetas
Autor: rodrigoangeloni
Fecha: 2025-06-01
"""

import os
import re
import sys
import unicodedata
from pathlib import Path
import time
from datetime import datetime

# Configuraci√≥n para PyInstaller
def resource_path(relative_path):
    """Obtiene la ruta absoluta del recurso, funciona para dev y para PyInstaller"""
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

def pause_and_exit():
    """Pausa antes de cerrar la ventana"""
    print("\nPresiona Enter para cerrar...")
    try:
        input()
    except:
        time.sleep(3)
    sys.exit()

def clear_screen():
    """Limpia la pantalla"""
    try:
        os.system('cls' if os.name == 'nt' else 'clear')
    except:
        print("\n" * 50)

def normalize_folder_name(name, options=None):
    """
    Normaliza el nombre de la carpeta seg√∫n las opciones especificadas
    """
    if not name or not isinstance(name, str):
        return 'unnamed_folder'
    
    original_name = name
    
    # Opciones por defecto
    if options is None:
        options = {
            'lowercase': True,
            'remove_accents': True,
            'replace_spaces': True,
            'remove_special': True,
            'preserve_numbers': True,
            'preserve_dots': False
        }
    
    # Convertir a min√∫sculas si est√° habilitado
    if options.get('lowercase', True):
        name = name.lower()
    
    # Eliminar acentos si est√° habilitado
    if options.get('remove_accents', True):
        try:
            name = unicodedata.normalize('NFD', name)
            name = ''.join(char for char in name if unicodedata.category(char) != 'Mn')
        except:
            pass
    
    # Construir patr√≥n de caracteres permitidos
    allowed_chars = r'a-zA-Z'
    
    if options.get('preserve_numbers', True):
        allowed_chars += r'0-9'
    
    if options.get('preserve_dots', False):
        allowed_chars += r'\.'
    
    # Reemplazar espacios
    if options.get('replace_spaces', True):
        name = re.sub(r'\s+', '_', name)
        allowed_chars += r'_'
    else:
        allowed_chars += r'\s'
    
    # Eliminar caracteres especiales si est√° habilitado
    if options.get('remove_special', True):
        pattern = f'[^{allowed_chars}]'
        name = re.sub(pattern, '_', name)
    
    # Limpiar m√∫ltiples guiones bajos consecutivos
    name = re.sub(r'_+', '_', name)
    
    # Eliminar guiones bajos al inicio y final
    name = name.strip('_')
    
    # Si el nombre queda vac√≠o, usar un nombre por defecto
    if not name:
        name = 'unnamed_folder'
    
    return name

def get_exe_directory():
    """Obtiene el directorio donde est√° el ejecutable o script"""
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))

def show_welcome_screen():
    """Muestra la pantalla de bienvenida con informaci√≥n del programa"""
    clear_screen()
    print("‚ïî" + "‚ïê" * 78 + "‚ïó")
    print("‚ïë" + " " * 20 + "RENOMBRADOR UNIVERSAL DE CARPETAS v2.0" + " " * 19 + "‚ïë")
    print("‚ïë" + " " * 30 + "by rodrigoangeloni" + " " * 30 + "‚ïë")
    print("‚ï†" + "‚ïê" * 78 + "‚ï£")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  üéØ ¬øQU√â HACE ESTE PROGRAMA?                                                 ‚ïë")
    print("‚ïë      Este programa normaliza los nombres de carpetas eliminando:            ‚ïë")
    print("‚ïë      ‚Ä¢ Espacios (los convierte en guiones bajos)                            ‚ïë")
    print("‚ïë      ‚Ä¢ Acentos y caracteres especiales (√±‚Üín, √°‚Üía, etc.)                    ‚ïë")
    print("‚ïë      ‚Ä¢ Caracteres problem√°ticos para sistemas                               ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  üìÅ EJEMPLOS DE TRANSFORMACI√ìN:                                             ‚ïë")
    print("‚ïë      'Mi Carpeta Especial √±√°√©√≠√≥√∫' ‚Üí 'mi_carpeta_especial_naeio'           ‚ïë")
    print("‚ïë      'Fotos Vacaciones (2024)'    ‚Üí 'fotos_vacaciones_2024'               ‚ïë")
    print("‚ïë      'M√∫sica - Rock & Roll'       ‚Üí 'musica_rock_roll'                     ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  ‚ö° CARACTER√çSTICAS:                                                         ‚ïë")
    print("‚ïë      ‚Ä¢ Vista previa antes de hacer cambios                                  ‚ïë")
    print("‚ïë      ‚Ä¢ Procesamiento por lotes de todas las carpetas                        ‚ïë")
    print("‚ïë      ‚Ä¢ Opciones personalizables                                             ‚ïë")
    print("‚ïë      ‚Ä¢ Seguro: no modifica archivos, solo nombres de carpetas               ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  üìÇ DIRECTORIO DE TRABAJO:                                                  ‚ïë")
    print(f"‚ïë      {get_exe_directory():<68} ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïö" + "‚ïê" * 78 + "‚ïù")
    print("\nüî• ¬°IMPORTANTE! Siempre haz una copia de seguridad antes de usar el programa")
    print("\nPresiona Enter para continuar...")
    try:
        input()
    except:
        time.sleep(3)

def show_options_menu():
    """Muestra el men√∫ de opciones de normalizaci√≥n"""
    options = {
        'lowercase': True,
        'remove_accents': True,
        'replace_spaces': True,
        'remove_special': True,
        'preserve_numbers': True,
        'preserve_dots': False
    }
    
    while True:
        clear_screen()
        print("‚ïî" + "‚ïê" * 78 + "‚ïó")
        print("‚ïë" + " " * 25 + "OPCIONES DE NORMALIZACI√ìN" + " " * 26 + "‚ïë")
        print("‚ï†" + "‚ïê" * 78 + "‚ï£")
        print("‚ïë                                                                              ‚ïë")
        
        status_map = {True: "‚úÖ ACTIVADO ", False: "‚ùå DESACTIVADO"}
        
        print(f"‚ïë  1. Convertir a min√∫sculas        {status_map[options['lowercase']]:<25} ‚ïë")
        print(f"‚ïë  2. Eliminar acentos              {status_map[options['remove_accents']]:<25} ‚ïë")
        print(f"‚ïë  3. Reemplazar espacios por _     {status_map[options['replace_spaces']]:<25} ‚ïë")
        print(f"‚ïë  4. Eliminar caracteres especiales {status_map[options['remove_special']]:<25} ‚ïë")
        print(f"‚ïë  5. Preservar n√∫meros             {status_map[options['preserve_numbers']]:<25} ‚ïë")
        print(f"‚ïë  6. Preservar puntos              {status_map[options['preserve_dots']]:<25} ‚ïë")
        print("‚ïë                                                                              ‚ïë")
        print("‚ïë  7. üîç Ver ejemplo con configuraci√≥n actual                                  ‚ïë")
        print("‚ïë  8. ‚úÖ Continuar con estas opciones                                          ‚ïë")
        print("‚ïë  9. üîô Volver al men√∫ principal                                              ‚ïë")
        print("‚ïë                                                                              ‚ïë")
        print("‚ïö" + "‚ïê" * 78 + "‚ïù")
        
        choice = input("\nSelecciona una opci√≥n (1-9): ").strip()
        
        if choice == '1':
            options['lowercase'] = not options['lowercase']
        elif choice == '2':
            options['remove_accents'] = not options['remove_accents']
        elif choice == '3':
            options['replace_spaces'] = not options['replace_spaces']
        elif choice == '4':
            options['remove_special'] = not options['remove_special']
        elif choice == '5':
            options['preserve_numbers'] = not options['preserve_numbers']
        elif choice == '6':
            options['preserve_dots'] = not options['preserve_dots']
        elif choice == '7':
            show_example_transformation(options)
        elif choice == '8':
            return options
        elif choice == '9':
            return None
        else:
            print("‚ùå Opci√≥n no v√°lida. Intenta de nuevo.")
            time.sleep(1)

def show_example_transformation(options):
    """Muestra ejemplos de transformaci√≥n con las opciones actuales"""
    clear_screen()
    print("‚ïî" + "‚ïê" * 78 + "‚ïó")
    print("‚ïë" + " " * 25 + "EJEMPLOS DE TRANSFORMACI√ìN" + " " * 26 + "‚ïë")
    print("‚ïö" + "‚ïê" * 78 + "‚ïù")
    print()
    
    examples = [
        "Mi Carpeta Especial √±√°√©√≠√≥√∫",
        "Fotos Vacaciones (2024)",
        "M√∫sica - Rock & Roll",
        "DOCUMENTOS IMPORTANTES!!!",
        "Nueva Carpeta 1.5",
        "Proyecto Final - Versi√≥n 2.0"
    ]
    
    for i, example in enumerate(examples, 1):
        transformed = normalize_folder_name(example, options)
        print(f"{i}. '{example}'")
        print(f"   ‚Üí '{transformed}'")
        print()
    
    print("Presiona Enter para volver...")
    try:
        input()
    except:
        time.sleep(2)

def rename_folders(directory_path, options=None):
    """Renombra todas las carpetas en el directorio especificado"""
    try:
        base_path = Path(directory_path).resolve()
        
        if not base_path.exists():
            print(f"‚ùå ERROR: El directorio no existe.")
            print(f"Ruta: {directory_path}")
            return False
        
        if not base_path.is_dir():
            print(f"‚ùå ERROR: La ruta no es un directorio.")
            return False
        
        print(f"üìÇ Procesando directorio:")
        print(f"   {base_path}")
        print("‚ïê" * 80)
        
        try:
            folders = [item for item in base_path.iterdir() if item.is_dir()]
        except PermissionError:
            print("‚ùå ERROR: Sin permisos para acceder al directorio.")
            return False
        except Exception as e:
            print(f"‚ùå ERROR al listar carpetas: {e}")
            return False
        
        if not folders:
            print("‚ÑπÔ∏è  INFO: No se encontraron carpetas para renombrar.")
            return True
        
        print(f"üìÅ Se encontraron {len(folders)} carpetas.\n")
        
        renamed_count = 0
        skipped_count = 0
        error_count = 0
        
        for i, folder in enumerate(folders, 1):
            try:
                original_name = folder.name
                new_name = normalize_folder_name(original_name, options)
                
                print(f"[{i:2d}/{len(folders)}] ", end="", flush=True)
                
                if original_name == new_name:
                    print(f"‚úÖ Sin cambios: '{original_name}'")
                    skipped_count += 1
                    continue
                
                new_path = folder.parent / new_name
                
                if new_path.exists():
                    print(f"‚ö†Ô∏è  CONFLICTO: '{original_name}' ‚Üí '{new_name}' (ya existe)")
                    error_count += 1
                    continue
                
                folder.rename(new_path)
                print(f"üîÑ RENOMBRADO: '{original_name}' ‚Üí '{new_name}'")
                renamed_count += 1
                
            except PermissionError:
                print(f"‚ùå ERROR: Sin permisos para renombrar '{folder.name}'")
                error_count += 1
            except OSError as e:
                print(f"‚ùå ERROR renombrando '{folder.name}': {e}")
                error_count += 1
            except Exception as e:
                print(f"‚ùå ERROR inesperado con '{folder.name}': {e}")
                error_count += 1
        
        print("\n" + "‚ïê" * 80)
        print("üìä RESUMEN:")
        print(f"   ‚úÖ Carpetas renombradas: {renamed_count}")
        print(f"   ‚û°Ô∏è  Carpetas sin cambios: {skipped_count}")
        print(f"   ‚ùå Errores/conflictos: {error_count}")
        print(f"   üìÅ Total procesadas: {len(folders)}")
        
        if renamed_count > 0:
            print(f"\nüéâ ¬°Renombrado completado exitosamente!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR general: {e}")
        return False

def preview_changes(directory_path, options=None):
    """Muestra una vista previa de los cambios que se realizar√≠an"""
    try:
        base_path = Path(directory_path).resolve()
        
        if not base_path.exists() or not base_path.is_dir():
            print(f"‚ùå ERROR: Directorio no v√°lido.")
            return False
        
        print(f"üîç Vista previa de cambios en:")
        print(f"   {base_path}")
        print("‚ïê" * 80)
        
        try:
            folders = [item for item in base_path.iterdir() if item.is_dir()]
        except PermissionError:
            print("‚ùå ERROR: Sin permisos para acceder al directorio.")
            return False
        except Exception as e:
            print(f"‚ùå ERROR al listar carpetas: {e}")
            return False
        
        if not folders:
            print("‚ÑπÔ∏è  INFO: No se encontraron carpetas.")
            return True
        
        changes_count = 0
        conflicts_count = 0
        
        print("üìã CAMBIOS PROPUESTOS:\n")
        
        for i, folder in enumerate(folders, 1):
            try:
                original_name = folder.name
                new_name = normalize_folder_name(original_name, options)
                
                print(f"[{i:2d}] ", end="")
                
                if original_name != new_name:
                    new_path = folder.parent / new_name
                    if new_path.exists():
                        print(f"‚ö†Ô∏è  '{original_name}' ‚Üí '{new_name}' (CONFLICTO - ya existe)")
                        conflicts_count += 1
                    else:
                        print(f"üîÑ '{original_name}' ‚Üí '{new_name}'")
                        changes_count += 1
                else:
                    print(f"‚úÖ '{original_name}' (sin cambios)")
                    
            except Exception as e:
                print(f"[{i:2d}] ‚ùå ERROR procesando carpeta: {e}")
        
        print("\n" + "‚ïê" * 80)
        print(f"üìä Se realizar√≠an {changes_count} cambios de {len(folders)} carpetas.")
        if conflicts_count > 0:
            print(f"‚ö†Ô∏è  Advertencia: {conflicts_count} conflictos detectados.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

def main():
    """Funci√≥n principal con men√∫ interactivo moderno"""
    try:
        # Configurar la consola para Windows
        if os.name == 'nt':
            try:
                os.system('title Renombrador Universal de Carpetas v2.0')
                os.system('mode con: cols=85 lines=40')
                os.system('chcp 65001 >nul 2>&1')
            except:
                pass
        
        # Mostrar pantalla de bienvenida
        show_welcome_screen()
        
        # Obtener el directorio de trabajo
        exe_dir = get_exe_directory()
        current_options = None
        
        while True:
            clear_screen()
            print("‚ïî" + "‚ïê" * 78 + "‚ïó")
            print("‚ïë" + " " * 20 + "RENOMBRADOR UNIVERSAL DE CARPETAS" + " " * 23 + "‚ïë")
            print("‚ïë" + " " * 35 + "MEN√ö PRINCIPAL" + " " * 30 + "‚ïë")
            print("‚ï†" + "‚ïê" * 78 + "‚ï£")
            print("‚ïë                                                                              ‚ïë")
            print("‚ïë  üìÇ Directorio de trabajo:                                                   ‚ïë")
            print(f"‚ïë     {exe_dir:<68} ‚ïë")
            print("‚ïë                                                                              ‚ïë")
            print("‚ïë  üéØ OPCIONES DISPONIBLES:                                                    ‚ïë")
            print("‚ïë                                                                              ‚ïë")
            print("‚ïë     1. ‚öôÔ∏è  Configurar opciones de normalizaci√≥n                              ‚ïë")
            print("‚ïë     2. üîç Vista previa de cambios                                            ‚ïë")
            print("‚ïë     3. üöÄ Ejecutar renombrado                                                ‚ïë")
            print("‚ïë     4. ‚ùì Mostrar ayuda                                                       ‚ïë")
            print("‚ïë     5. üö™ Salir                                                              ‚ïë")
            print("‚ïë                                                                              ‚ïë")
            
            if current_options:
                print("‚ïë  ‚úÖ Opciones configuradas: S√ç                                               ‚ïë")
            else:
                print("‚ïë  ‚öôÔ∏è  Opciones configuradas: Usando valores por defecto                      ‚ïë")
            
            print("‚ïë                                                                              ‚ïë")
            print("‚ïö" + "‚ïê" * 78 + "‚ïù")
            
            choice = input("\nüéØ Selecciona una opci√≥n (1-5): ").strip()
            
            if choice == '1':
                new_options = show_options_menu()
                if new_options is not None:
                    current_options = new_options
                    print("‚úÖ Opciones configuradas correctamente.")
                    time.sleep(1)
                    
            elif choice == '2':
                clear_screen()
                print("‚ïî" + "‚ïê" * 78 + "‚ïó")
                print("‚ïë" + " " * 30 + "VISTA PREVIA" + " " * 33 + "‚ïë")
                print("‚ïö" + "‚ïê" * 78 + "‚ïù")
                print()
                if preview_changes(exe_dir, current_options):
                    print("\nüîç Vista previa completada.")
                else:
                    print("\n‚ùå Error en la vista previa.")
                input("\nPresiona Enter para continuar...")
                
            elif choice == '3':
                clear_screen()
                print("‚ïî" + "‚ïê" * 78 + "‚ïó")
                print("‚ïë" + " " * 30 + "EJECUTAR RENOMBRADO" + " " * 27 + "‚ïë")
                print("‚ïö" + "‚ïê" * 78 + "‚ïù")
                print()
                print("‚ö†Ô∏è  ATENCI√ìN: Esta operaci√≥n renombrar√° las carpetas permanentemente.")
                print("üîí Aseg√∫rate de tener una copia de seguridad si es necesario.")
                print()
                confirm = input("ü§î ¬øEst√°s seguro de que quieres continuar? (S/n): ").strip().lower()
                
                if confirm in ['s', 'si', 'y', 'yes', '']:
                    print("\nüöÄ Iniciando renombrado...\n")
                    if rename_folders(exe_dir, current_options):
                        print("\n‚úÖ Proceso completado.")
                    else:
                        print("\n‚ùå El proceso termin√≥ con errores.")
                else:
                    print("\nüö´ Operaci√≥n cancelada.")
                
                input("\nPresiona Enter para continuar...")
                
            elif choice == '4':
                show_help()
                
            elif choice == '5':
                clear_screen()
                print("‚ïî" + "‚ïê" * 78 + "‚ïó")
                print("‚ïë" + " " * 25 + "¬°GRACIAS POR USAR EL PROGRAMA!" + " " * 22 + "‚ïë")
                print("‚ïë" + " " * 20 + "Que tengas un excelente d√≠a organizando" + " " * 19 + "‚ïë")
                print("‚ïë" + " " * 30 + "tus carpetas! üìÅ‚ú®" + " " * 29 + "‚ïë")
                print("‚ïö" + "‚ïê" * 78 + "‚ïù")
                time.sleep(2)
                break
                
            else:
                print("‚ùå Opci√≥n no v√°lida. Por favor, selecciona 1, 2, 3, 4 o 5.")
                time.sleep(1)
                
    except KeyboardInterrupt:
        print("\n\nüö´ Operaci√≥n cancelada por el usuario.")
        pause_and_exit()
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("El programa se cerrar√° en 5 segundos...")
        time.sleep(5)
        pause_and_exit()

def show_help():
    """Muestra la pantalla de ayuda"""
    clear_screen()
    print("‚ïî" + "‚ïê" * 78 + "‚ïó")
    print("‚ïë" + " " * 32 + "AYUDA Y GU√çA" + " " * 33 + "‚ïë")
    print("‚ï†" + "‚ïê" * 78 + "‚ï£")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  üéØ PROP√ìSITO:                                                               ‚ïë")
    print("‚ïë      Este programa normaliza nombres de carpetas para hacerlos m√°s          ‚ïë")
    print("‚ïë      compatibles con diferentes sistemas y servidores.                      ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  üìã PASOS RECOMENDADOS:                                                      ‚ïë")
    print("‚ïë      1. Configura las opciones seg√∫n tus necesidades                        ‚ïë")
    print("‚ïë      2. Usa la vista previa para ver qu√© cambios se har√°n                   ‚ïë")
    print("‚ïë      3. Ejecuta el renombrado solo si est√°s satisfecho                      ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  ‚öôÔ∏è  OPCIONES PRINCIPALES:                                                   ‚ïë")
    print("‚ïë      ‚Ä¢ Min√∫sculas: Convierte TODO a min√∫sculas                              ‚ïë")
    print("‚ïë      ‚Ä¢ Eliminar acentos: √±‚Üín, √°‚Üía, √©‚Üíe, etc.                               ‚ïë")
    print("‚ïë      ‚Ä¢ Reemplazar espacios: Los convierte en guiones bajos (_)              ‚ïë")
    print("‚ïë      ‚Ä¢ Eliminar especiales: Quita s√≠mbolos como @#$%&*()                   ‚ïë")
    print("‚ïë      ‚Ä¢ Preservar n√∫meros: Mantiene los n√∫meros (0-9)                        ‚ïë")
    print("‚ïë      ‚Ä¢ Preservar puntos: Mantiene los puntos (.)                            ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  üõ°Ô∏è  SEGURIDAD:                                                              ‚ïë")
    print("‚ïë      ‚Ä¢ Solo renombra carpetas, NO toca archivos                             ‚ïë")
    print("‚ïë      ‚Ä¢ No borra ni modifica contenido                                       ‚ïë")
    print("‚ïë      ‚Ä¢ Detecta conflictos antes de hacer cambios                            ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  üí° CONSEJO: Siempre haz una copia de seguridad antes de usar!              ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïö" + "‚ïê" * 78 + "‚ïù")
    input("\nPresiona Enter para volver al men√∫...")

if __name__ == "__main__":
    main()
